import 'dart:math' as math;

import 'package:vector_graphics_compiler/vector_graphics_compiler.dart';

import 'package:test/test.dart';

void main() {
  test('SVG Path tests', () {
    Path path = parseSvgPathData(
        'M22.1595 3.80852C19.6789 1.35254 16.3807 -4.80966e-07 12.8727 '
        '-4.80966e-07C9.36452 -4.80966e-07 6.06642 1.35254 3.58579 3.80852C1.77297 5.60333 '
        '0.53896 7.8599 0.0171889 10.3343C-0.0738999 10.7666 0.206109 11.1901 0.64265 11.2803'
        'C1.07908 11.3706 1.50711 11.0934 1.5982 10.661C2.05552 8.49195 3.13775 6.51338 4.72783 '
        '4.9391C9.21893 0.492838 16.5262 0.492728 21.0173 4.9391C25.5082 9.38548 25.5082 16.6202 '
        '21.0173 21.0667C16.5265 25.5132 9.21893 25.5133 4.72805 21.0669C3.17644 19.5307 2.10538 '
        '17.6035 1.63081 15.4937C1.53386 15.0627 1.10252 14.7908 0.66697 14.887C0.231645 14.983 '
        '-0.0427272 15.4103 0.0542205 15.8413C0.595668 18.2481 1.81686 20.4461 3.5859 22.1976'
        'C6.14623 24.7325 9.50955 26 12.8727 26C16.236 26 19.5991 24.7326 22.1595 22.1976C27.2802 '
        '17.1277 27.2802 8.87841 22.1595 3.80852Z');
    expect(
      path.toFlutterString(),
      'Path()\n'
      '  ..moveTo(22.1595, 3.80852)\n'
      '  ..cubicTo(19.6789, 1.35254, 16.3807, -4.809659999999999e-7, 12.8727, -4.809659999999999e-7)\n'
      '  ..cubicTo(9.36452, -4.809659999999999e-7, 6.06642, 1.35254, 3.5857900000000003, 3.80852)\n'
      '  ..cubicTo(1.77297, 5.60333, 0.53896, 7.8599, 0.017188900000000007, 10.3343)\n'
      '  ..cubicTo(-0.0738999, 10.7666, 0.20610900000000001, 11.1901, 0.6426500000000002, 11.2803)\n'
      '  ..cubicTo(1.07908, 11.3706, 1.50711, 11.0934, 1.5982, 10.661)\n'
      '  ..cubicTo(2.05552, 8.49195, 3.13775, 6.51338, 4.72783, 4.9391)\n'
      '  ..cubicTo(9.21893, 0.49283800000000005, 16.5262, 0.49272800000000005, 21.0173, 4.9391)\n'
      '  ..cubicTo(25.5082, 9.38548, 25.5082, 16.6202, 21.0173, 21.0667)\n'
      '  ..cubicTo(16.5265, 25.5132, 9.21893, 25.5133, 4.72805, 21.0669)\n'
      '  ..cubicTo(3.17644, 19.5307, 2.10538, 17.6035, 1.63081, 15.4937)\n'
      '  ..cubicTo(1.53386, 15.0627, 1.10252, 14.7908, 0.6669700000000002, 14.887)\n'
      '  ..cubicTo(0.23164500000000002, 14.983, -0.04272720000000001, 15.4103, 0.05422050000000001, 15.8413)\n'
      '  ..cubicTo(0.5956680000000001, 18.2481, 1.8168600000000001, 20.4461, 3.5859, 22.1976)\n'
      '  ..cubicTo(6.14623, 24.7325, 9.50955, 26.0, 12.8727, 26.0)\n'
      '  ..cubicTo(16.236, 26.0, 19.5991, 24.7326, 22.1595, 22.1976)\n'
      '  ..cubicTo(27.2802, 17.1277, 27.2802, 8.87841, 22.1595, 3.80852)\n'
      '  ..close();',
    );

    path = parseSvgPathData('M10 10L20 20');

    expect(
      path.toFlutterString(),
      'Path()\n'
      '  ..moveTo(10.0, 10.0)\n'
      '  ..lineTo(20.0, 20.0);',
    );
  });

  test('addRect', () {
    final PathBuilder builder = PathBuilder()
      ..addRect(const Rect.fromLTRB(10, 10, 20, 20));

    expect(
      builder.toPath().toFlutterString(),
      'Path()\n'
      '  ..moveTo(20.0, 10.0)\n'
      '  ..lineTo(20.0, 20.0)\n'
      '  ..lineTo(10.0, 20.0)\n'
      '  ..lineTo(10.0, 10.0)\n'
      '  ..close();',
    );
  });

  test('addOval', () {
    final PathBuilder builder = PathBuilder()
      ..addOval(const Rect.fromLTRB(10, 10, 20, 20))
      ..addOval(const Rect.fromLTRB(50, 50, 80, 70));
    expect(
      builder.toPath().toFlutterString(),
      'Path()\n'
      '  ..moveTo(15.0, 10.0)\n'
      '  ..cubicTo(17.75957512247, 10.0, 20.0, 12.24042487753, 20.0, 15.0)\n'
      '  ..cubicTo(20.0, 17.75957512247, 17.75957512247, 20.0, 15.0, 20.0)\n'
      '  ..cubicTo(12.24042487753, 20.0, 10.0, 17.75957512247, 10.0, 15.0)\n'
      '  ..cubicTo(10.0, 12.24042487753, 12.24042487753, 10.0, 15.0, 10.0)\n'
      '  ..close()\n'
      '  ..moveTo(65.0, 50.0)\n'
      '  ..cubicTo(73.27872536741, 50.0, 80.0, 54.48084975506, 80.0, 60.0)\n'
      '  ..cubicTo(80.0, 65.51915024494, 73.27872536741, 70.0, 65.0, 70.0)\n'
      '  ..cubicTo(56.72127463259, 70.0, 50.0, 65.51915024494, 50.0, 60.0)\n'
      '  ..cubicTo(50.0, 54.48084975506, 56.72127463259, 50.0, 65.0, 50.0)\n'
      '  ..close();',
    );
  });

  test('addRRect', () {
    final PathBuilder builder = PathBuilder()
      ..addRRect(const Rect.fromLTRB(20, 20, 60, 60), 5, 5);
    expect(
      builder.toPath().toFlutterString(),
      'Path()\n'
      '  ..moveTo(25.0, 20.0)\n'
      '  ..lineTo(55.0, 20.0)\n'
      '  ..cubicTo(57.75957512247, 20.0, 60.0, 22.24042487753, 60.0, 25.0)\n'
      '  ..lineTo(60.0, 55.0)\n'
      '  ..cubicTo(60.0, 57.75957512247, 57.75957512247, 60.0, 55.0, 60.0)\n'
      '  ..lineTo(25.0, 60.0)\n'
      '  ..cubicTo(22.24042487753, 60.0, 20.0, 57.75957512247, 20.0, 55.0)\n'
      '  ..lineTo(20.0, 25.0)\n'
      '  ..cubicTo(20.0, 22.24042487753, 22.24042487753, 20.0, 25.0, 20.0)\n'
      '  ..close();',
    );
  });

  test('reset/no reset', () {
    final PathBuilder builder = PathBuilder()..lineTo(10, 10);

    final Path a = builder.toPath(reset: false);
    final Path b = builder.toPath();
    final Path c = builder.toPath();

    expect(a, b);
    expect(identical(a, b), false);
    expect(a != c, true);
    expect(c.isEmpty, true);
  });

  test('PathBuilder.fromPath', () {
    final PathBuilder builder = PathBuilder()..lineTo(10, 10);

    final Path a = builder.toPath();

    final PathBuilder builderA = PathBuilder.fromPath(a);
    final Path b = builderA.toPath();

    expect(a, b);
    expect(identical(a, b), false);
  });

  test('transforms', () {
    Path path = parseSvgPathData(
        'M22.1595 3.80852C19.6789 1.35254 16.3807 -4.80966e-07 12.8727 '
        '-4.80966e-07C9.36452 -4.80966e-07 6.06642 1.35254 3.58579 3.80852C1.77297 5.60333 '
        '0.53896 7.8599 0.0171889 10.3343C-0.0738999 10.7666 0.206109 11.1901 0.64265 11.2803'
        'C1.07908 11.3706 1.50711 11.0934 1.5982 10.661C2.05552 8.49195 3.13775 6.51338 4.72783 '
        '4.9391C9.21893 0.492838 16.5262 0.492728 21.0173 4.9391C25.5082 9.38548 25.5082 16.6202 '
        '21.0173 21.0667C16.5265 25.5132 9.21893 25.5133 4.72805 21.0669C3.17644 19.5307 2.10538 '
        '17.6035 1.63081 15.4937C1.53386 15.0627 1.10252 14.7908 0.66697 14.887C0.231645 14.983 '
        '-0.0427272 15.4103 0.0542205 15.8413C0.595668 18.2481 1.81686 20.4461 3.5859 22.1976'
        'C6.14623 24.7325 9.50955 26 12.8727 26C16.236 26 19.5991 24.7326 22.1595 22.1976C27.2802 '
        '17.1277 27.2802 8.87841 22.1595 3.80852Z');
    expect(
      path.transformed(AffineMatrix.identity).toFlutterString(),
      'Path()\n'
      '  ..moveTo(22.1595, 3.80852)\n'
      '  ..cubicTo(19.6789, 1.35254, 16.3807, -4.809659999999999e-7, 12.8727, -4.809659999999999e-7)\n'
      '  ..cubicTo(9.36452, -4.809659999999999e-7, 6.06642, 1.35254, 3.5857900000000003, 3.80852)\n'
      '  ..cubicTo(1.77297, 5.60333, 0.53896, 7.8599, 0.017188900000000007, 10.3343)\n'
      '  ..cubicTo(-0.0738999, 10.7666, 0.20610900000000001, 11.1901, 0.6426500000000002, 11.2803)\n'
      '  ..cubicTo(1.07908, 11.3706, 1.50711, 11.0934, 1.5982, 10.661)\n'
      '  ..cubicTo(2.05552, 8.49195, 3.13775, 6.51338, 4.72783, 4.9391)\n'
      '  ..cubicTo(9.21893, 0.49283800000000005, 16.5262, 0.49272800000000005, 21.0173, 4.9391)\n'
      '  ..cubicTo(25.5082, 9.38548, 25.5082, 16.6202, 21.0173, 21.0667)\n'
      '  ..cubicTo(16.5265, 25.5132, 9.21893, 25.5133, 4.72805, 21.0669)\n'
      '  ..cubicTo(3.17644, 19.5307, 2.10538, 17.6035, 1.63081, 15.4937)\n'
      '  ..cubicTo(1.53386, 15.0627, 1.10252, 14.7908, 0.6669700000000002, 14.887)\n'
      '  ..cubicTo(0.23164500000000002, 14.983, -0.04272720000000001, 15.4103, 0.05422050000000001, 15.8413)\n'
      '  ..cubicTo(0.5956680000000001, 18.2481, 1.8168600000000001, 20.4461, 3.5859, 22.1976)\n'
      '  ..cubicTo(6.14623, 24.7325, 9.50955, 26.0, 12.8727, 26.0)\n'
      '  ..cubicTo(16.236, 26.0, 19.5991, 24.7326, 22.1595, 22.1976)\n'
      '  ..cubicTo(27.2802, 17.1277, 27.2802, 8.87841, 22.1595, 3.80852)\n'
      '  ..close();',
    );

    expect(
      path
          .transformed(AffineMatrix.identity.rotated(math.pi / 2))
          .toFlutterString(),
      'Path()\n'
      '  ..moveTo(-3.808519999999999, 22.1595)\n'
      '  ..cubicTo(-1.352539999999999, 19.6789, 4.809660010030285e-7, 16.3807, 4.809660007882255e-7, 12.8727)\n'
      '  ..cubicTo(4.809660005734114e-7, 9.36452, -1.3525399999999996, 6.06642, -3.80852, 3.5857900000000007)\n'
      '  ..cubicTo(-5.60333, 1.7729700000000004, -7.8599, 0.5389600000000004, -10.3343, 0.01718890000000064)\n'
      '  ..cubicTo(-10.7666, -0.07389989999999934, -11.1901, 0.2061090000000007, -11.2803, 0.6426500000000008)\n'
      '  ..cubicTo(-11.3706, 1.0790800000000007, -11.0934, 1.5071100000000006, -10.661, 1.5982000000000007)\n'
      '  ..cubicTo(-8.49195, 2.0555200000000005, -6.51338, 3.1377500000000005, -4.9391, 4.72783)\n'
      '  ..cubicTo(-0.4928379999999995, 9.21893, -0.49272799999999906, 16.5262, -4.939099999999999, 21.0173)\n'
      '  ..cubicTo(-9.385479999999998, 25.5082, -16.6202, 25.5082, -21.0667, 21.0173)\n'
      '  ..cubicTo(-25.5132, 16.5265, -25.5133, 9.218930000000002, -21.0669, 4.7280500000000005)\n'
      '  ..cubicTo(-19.5307, 3.1764400000000013, -17.6035, 2.1053800000000007, -15.4937, 1.630810000000001)\n'
      '  ..cubicTo(-15.0627, 1.533860000000001, -14.7908, 1.1025200000000008, -14.887, 0.6669700000000011)\n'
      '  ..cubicTo(-14.983, 0.23164500000000093, -15.4103, -0.04272719999999906, -15.8413, 0.05422050000000098)\n'
      '  ..cubicTo(-18.2481, 0.5956680000000012, -20.4461, 1.8168600000000015, -22.1976, 3.5859000000000014)\n'
      '  ..cubicTo(-24.7325, 6.146230000000002, -26.0, 9.509550000000003, -26.0, 12.872700000000002)\n'
      '  ..cubicTo(-26.0, 16.236, -24.7326, 19.5991, -22.1976, 22.1595)\n'
      '  ..cubicTo(-17.1277, 27.2802, -8.878409999999999, 27.2802, -3.808519999999999, 22.1595)\n'
      '  ..close();',
    );

    path = parseSvgPathData('M10 10L20 20');

    expect(
      path
          .transformed(AffineMatrix.identity.translated(10, 10))
          .toFlutterString(),
      'Path()\n'
      '  ..moveTo(20.0, 20.0)\n'
      '  ..lineTo(30.0, 30.0);',
    );
  });

  test('Compute path bounds with rect', () {
    final PathBuilder builder = PathBuilder()
      ..addRect(const Rect.fromLTWH(5, 5, 95, 95))
      ..close();
    final Path path = builder.toPath();

    expect(path.bounds(), const Rect.fromLTWH(5, 5, 95, 95));
  });

  test('Compute path bounds with lines', () {
    final PathBuilder builder = PathBuilder()
      ..moveTo(0, 0)
      ..lineTo(25, 0)
      ..lineTo(25, 25)
      ..lineTo(0, 25)
      ..close();
    final Path path = builder.toPath();

    expect(path.bounds(), const Rect.fromLTWH(0, 0, 25, 25));
  });

  test('Compute path bounds with cubics', () {
    final PathBuilder builder = PathBuilder()
      ..moveTo(0, 0)
      ..cubicTo(10, 10, 20, 20, -10, -10)
      ..close();
    final Path path = builder.toPath();

    expect(path.bounds(), const Rect.fromLTRB(-10.0, -10.0, 20.0, 20.0));
  });
}
